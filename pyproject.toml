[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "genesis-frontend"
version = "1.0.0"
description = "Agentes especializados en generación de código frontend para Genesis Engine"
authors = [
    {name = "Genesis Engine Team", email = "team@genesis-engine.dev"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers", 
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Code Generators",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Text Processing :: Markup :: HTML",
]
keywords = [
    "genesis-engine",
    "frontend",
    "nextjs", 
    "react",
    "vue",
    "code-generation",
    "ai-agents",
    "typescript",
    "tailwind"
]

dependencies = [
    # Core dependencies
    "pydantic>=2.0.0,<3.0.0",
    "typing-extensions>=4.5.0",
    
    # Template engine
    "jinja2>=3.1.0,<4.0.0",
    
    # File handling
    "pathlib-mate>=1.0.0",
    
    # JSON/YAML handling  
    "pyyaml>=6.0.0,<7.0.0",
    
    # HTTP requests (for LLM integration)
    "httpx>=0.24.0,<1.0.0",
    
    # Async support
    "asyncio-compat>=0.1.0",
    
    # Utilities
    "python-slugify>=8.0.0,<9.0.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.0.0,<8.0.0",
    "pytest-asyncio>=0.21.0,<1.0.0", 
    "pytest-cov>=4.0.0,<5.0.0",
    "pytest-mock>=3.10.0,<4.0.0",
    "pytest-xdist>=3.0.0,<4.0.0",
    
    # Code quality
    "black>=23.0.0,<24.0.0",
    "isort>=5.12.0,<6.0.0",
    "mypy>=1.4.0,<2.0.0",
    "ruff>=0.0.270,<1.0.0",
    
    # Documentation
    "mkdocs>=1.4.0,<2.0.0",
    "mkdocs-material>=9.0.0,<10.0.0",
    "mkdocstrings[python]>=0.20.0,<1.0.0",
    
    # Development tools
    "pre-commit>=3.0.0,<4.0.0",
    "tox>=4.0.0,<5.0.0",
]

test = [
    "pytest>=7.0.0,<8.0.0",
    "pytest-asyncio>=0.21.0,<1.0.0",
    "pytest-cov>=4.0.0,<5.0.0",
    "pytest-mock>=3.10.0,<4.0.0",
]

docs = [
    "mkdocs>=1.4.0,<2.0.0",
    "mkdocs-material>=9.0.0,<10.0.0",
    "mkdocstrings[python]>=0.20.0,<1.0.0",
]

# Dependencies for ecosystem integration
ecosystem = [
    "mcpturbo>=1.0.0,<2.0.0",
    "genesis-templates>=1.0.0,<2.0.0",
    "genesis-agents>=1.0.0,<2.0.0",
]

# Full installation with all features
full = [
    "genesis-frontend[dev,test,docs,ecosystem]"
]

[project.urls]
Homepage = "https://github.com/genesis-engine/genesis-frontend"
Documentation = "https://docs.genesis-engine.dev/frontend"
Repository = "https://github.com/genesis-engine/genesis-frontend.git"
"Bug Tracker" = "https://github.com/genesis-engine/genesis-frontend/issues"
Changelog = "https://github.com/genesis-engine/genesis-frontend/blob/main/CHANGELOG.md"

[project.scripts]
# No CLI scripts - siguiendo la doctrina del ecosistema
# genesis-frontend no debe tener interfaz directa con usuarios

[tool.setuptools.packages.find]
where = ["."]
include = ["genesis_frontend*"]
exclude = ["tests*", "docs*", "examples*"]

[tool.setuptools.package-data]
genesis_frontend = [
    "py.typed",
    "*.json",
    "*.yaml", 
    "*.yml",
    "config/*.json",
    "config/*.yaml",
]

# ===== HERRAMIENTAS DE DESARROLLO =====

[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["genesis_frontend"]
known_third_party = ["pydantic", "jinja2", "httpx", "pytest"]
skip_gitignore = true

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[tool.ruff]
line-length = 88
target-version = "py39"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings  
    "F",   # pyflakes
    "I",   # isort
    "C",   # flake8-comprehensions
    "B",   # flake8-bugbear
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # imported but unused
"tests/**/*.py" = ["F401", "F811"]  # test imports

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers", 
    "--strict-config",
    "--cov=genesis_frontend",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
pythonpath = ["."]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "agent: marks tests related to agents",
    "config: marks tests related to configuration",
    "utils: marks tests related to utilities",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["genesis_frontend"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.tox:tox]
envlist = py39,py310,py311,py312,lint,type-check
isolated_build = true

[tool.tox:testenv]
deps = 
    {[project.optional-dependencies]test}
commands = pytest {posargs}

[tool.tox:testenv:lint]
deps = 
    black
    isort
    ruff
commands = 
    black --check --diff genesis_frontend tests
    isort --check-only --diff genesis_frontend tests
    ruff genesis_frontend tests

[tool.tox:testenv:type-check]
deps = 
    mypy
    {[project.optional-dependencies]dev}
commands = mypy genesis_frontend

[tool.tox:testenv:docs]
deps = 
    {[project.optional-dependencies]docs}
commands = 
    mkdocs build --strict

# ===== METADATA ADICIONAL =====

[tool.setuptools_scm]
# Gestión automática de versiones si se usa git tags

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101", "B601"]  # Skip assert_used, shell=True

# Configuración para herramientas de ecosistema Genesis
[tool.genesis]
ecosystem_role = "frontend-generation"
agent_types = ["nextjs", "react", "vue", "ui"]
dependencies = ["mcpturbo", "genesis-templates"]
api_version = "1.0"

[tool.genesis.agents]
nextjs = "genesis_frontend.agents:NextJSAgent"
react = "genesis_frontend.agents:ReactAgent" 
vue = "genesis_frontend.agents:VueAgent"
ui = "genesis_frontend.agents:UIAgent"

[tool.genesis.capabilities]
frameworks = ["nextjs", "react", "vue"]
build_tools = ["vite", "webpack", "parcel"]
ui_libraries = ["tailwindcss", "styled_components", "material_ui", "chakra_ui"]
state_management = ["redux_toolkit", "zustand", "pinia", "vuex"]
testing = ["vitest", "jest", "testing_library"]

[tool.genesis.templates]
base_path = "templates"
cache_enabled = true
auto_reload = false  # Solo en desarrollo